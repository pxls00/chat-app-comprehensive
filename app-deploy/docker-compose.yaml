version: "3"  

services:
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    volumes:
      - redis_volume_data:/data
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 2s
      retries: 10
    networks:
      - chat-app
  
  redis_insight:
    image: redislabs/redisinsight:1.14.0
    container_name: redis_insight
    restart: always
    ports:
      - 8001:8001
    volumes:
      - redis_insight_volume_data:/db
    networks:
      - chat-app

  postgres:
    image: postgres:15
    container_name: postgres-chat
    restart: always
    environment:
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      chat-app:
        aliases:
          - postgres
    volumes:  
      - ./data_local/pg:/var/lib/postgresql/data/
      - ./settings/pg/init.sql:/docker-entrypoint-initdb.d/init.sql
  
  pgadmin:
    image: "dpage/pgadmin4"
    container_name: pgadmin-chat
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PGADMIN_DEFAULT_EMAIL=ltwixy@mail.com
      - PGADMIN_DEFAULT_PASSWORD=postgres
      - PGADMIN_LISTEN_PORT=4433
    ports:
      - "4434:4433"
    volumes:
      - "./settings/pgadmin/servers.json:/pgadmin4/servers.json"
    networks:
      - chat-app


  backend:
    # image: "chat-app-backend"
    build: "../app-backend/"
    container_name: backend
    restart: always
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=localhost
      - DB_PORT=5432
      - DB_NAME=postgres
      - REDIS_PORT=6379
      - REDIS_HOST=redis
      - JWT_ACCESS_TOKEN=learn_express_jwt_auth_access_secret_key
      - JWT_REFRESH_TOKEN=learn_express_jwt_auth_refresh_secret_key
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

    networks:
      - chat-app
  
  frontend:
    # image: "vue-main-host-image"
    build: "../app-frontend/"
    container_name: frontend
    restart: always
    ports:
      - "8080:80"
    environment:
      - VITE_API_URL=${VITE_API_URL}
    networks:
      - chat-app

volumes:
  redis_volume_data:
  redis_insight_volume_data:

networks:
  chat-app:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"